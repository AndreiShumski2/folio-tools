#!/usr/bin/env python3
import requests
from crontab import CronTab
try:
    import configparser
except:
    import ConfigParser
import copy, json, os, sys
import argparse 

opaki_url = os.getenv('OKAPI_URL', 'http://localhost:9130')
header_default={ "Content-type": "application/json", "cache-control": "no-cache", "accept": "application/json" }

def getCredentials(section="DEFAULT"):
    home=os.path.expanduser('~')
    credentials="{0}/.folio-cron".format(home)
    try:
        config = configparser.ConfigParser()
    except:
        config = ConfigParser.ConfigParser()
    config.read(credentials)
    return  dict(config.items(section))

def getAuthToken(tenant,section="DEFAULT"):
    headers = copy.copy(header_default)
    headers["x-okapi-tenant"]= tenant
    creds= getCredentials(section)
    req = requests.post("{0}/authn/login".format(opaki_url),data=json.dumps(creds),headers=headers)
    return req.headers['x-okapi-token']

def getServiceVariables(name):
    path=os.path.dirname(os.path.abspath(__file__))
    with open("{0}/config/{1}.json".format(path,name),'r') as f1:
        jsonstring=f1.read()
    return json.loads(jsonstring)

def cronOkapiService(name,**kwargs):
        service_vars = getServiceVariables(name)
        headers = copy.copy(header_default)
        headers["x-okapi-tenant"]= service_vars['tenant']
        headers["x-okapi-token"]=getAuthToken(service_vars['tenant'],section=service_vars['user_config_section'])
        if service_vars['method'].lower() == 'post':
            payload=service_vars['data']
            req = requests.post("{0}{1}".format(opaki_url,service_vars['api-path']), data=json.dumps(payload),headers=headers)
            
        elif service_vars['method'].lower() == 'get':
            payload=service_vars['data']
            req = requests.get("{0}{1}".format(opaki_url,service_vars['api-path']), params=payload,headers=headers)
            print(req.json())
        else:
            raise Exception("Method not supported(Only GET and POST)")

def cronOkapiServiceSetup(**kwargs):
        path="{0}/config".format(os.path.dirname(os.path.abspath(__file__)))
        _, _, filenames = next(os.walk(path))
        home=os.path.expanduser('~')
        crontab_template = "{0} export OKAPI_URL={1};{2} service {3} >> {4}/folio_cron_output.log 2>&1"
        cron = CronTab()
        cron = CronTab(user=True)
        cron.read()
        cron_jobs = cron.__str__().split('\n')
        cron.remove_all()
        abspath = os.path.abspath(__file__)
        for filename in filenames:
            job=os.path.splitext(filename)
            if job[1]=='.json':
                service_vars=getServiceVariables(job[0])
                if service_vars['enable']:
                    crontab_string = crontab_template.format(service_vars['cron_time'],opaki_url,abspath,job[0],home)
                    cron_jobs.append(crontab_string)
        cron_jobs=list(set(cron_jobs))
        cron_jobs.remove("")
        crontab_string= "\n".join(cron_jobs)
        cron = CronTab(tab=crontab_string)
        cron.write_to_user()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Setup or run service')
    subparsers = parser.add_subparsers()
    parser_cronokapiservice = subparsers.add_parser('service', help='runs okapi api')
    parser_cronokapiservice.set_defaults(func=cronOkapiService) 
    parser_cronokapiservice.add_argument('name', type = str)
    parser_cronskapiservicesetup = subparsers.add_parser('setup', help='Set up crontab to run tasks in config folder')
    parser_cronskapiservicesetup.set_defaults(func=cronOkapiServiceSetup)
    options = parser.parse_args()
    options.func(**vars(options))
